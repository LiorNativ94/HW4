name: assignment4

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Capture start time
        id: start_time
        run: echo "START_TIME=$(date -Iminutes)" >> $GITHUB_ENV

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and export stocks1 image
        id: build_stocks1
        uses: docker/build-push-action@v5
        with:
          context: ./stocks1
          file: ./stocks1/Dockerfile
          push: false
          tags: stocks1:latest
          outputs: |
            type=docker,dest=/tmp/stocks1_image.tar
      - run: echo "BUILD_STOCKS1_RESULT=success" >> $GITHUB_ENV
        if: success()
      # Build and upload stocks and cap-gains image as artifacts
      - name: Build and export capital gains image
        id: build_capital_gains
        uses: docker/build-push-action@v5
        with:
          context: ./capital_gains
          file: ./capital_gains/Dockerfile
          push: false
          tags: capital-gains:latest
          outputs: |
            type=docker,dest=/tmp/capital_gains_image.tar
      - run: echo "BUILD_CAPITAL_GAINS_RESULT=success" >> $GITHUB_ENV
        if: success()

      - name: Write log file
        run: |
          echo "${{ env.START_TIME }}" > log.txt
          echo "Lior Nativ" >> log.txt

          # Check the outcomes of the build steps
          if [ "$BUILD_STOCKS1_RESULT" == "success" ] && [ "$BUILD_CAPITAL_GAINS_RESULT" == "success" ]; then
            echo "images successfully built" >> log.txt
          else
            echo "images not able to be built" >> log.txt
          fi
        env:
          BUILD_STOCKS1_RESULT: ${{ env.BUILD_STOCKS1_RESULT }}
          BUILD_CAPITAL_GAINS_RESULT: ${{ env.BUILD_CAPITAL_GAINS_RESULT }}

      - name: Upload stocks1 image as artifact
        uses: actions/upload-artifact@v4
        with:
          name: stocks1-image
          path: /tmp/stocks1_image.tar

      - name: Upload capital gains image as artifact
        uses: actions/upload-artifact@v4
        with:
          name: capital-gains-image
          path: /tmp/capital_gains_image.tar

      - name: Upload log.txt as artifact
        uses: actions/upload-artifact@v4
        with:
          name: log-file
          path: log.txt

  test:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Download stocks1 image artifact
        uses: actions/download-artifact@v4
        with:
          name: stocks1-image
          path: /tmp

      - name: Download capital gains image artifact
        uses: actions/download-artifact@v4
        with:
          name: capital-gains-image
          path: /tmp

      - name: Download log artifact
        uses: actions/download-artifact@v4
        with:
          name: log-file
          path: .

      - name: Verify downloaded artifact
        run: ls -l /tmp

      - name: Load Docker images
        run: |
          docker load -i /tmp/stocks1_image.tar
          docker load -i /tmp/capital_gains_image.tar

      - name: List Docker images
        run: docker image ls

      - name: Run Docker Compose
        run: |
          docker compose -f docker-compose.yml up -d

      - name: Delay 5 seconds
        run: sleep 5
      
      - name: Check containers running
        id: check_containers
        run: |
          RUNNING_CONTAINERS=$(docker ps --format "{{.Names}}" | wc -l)
          if [ "$RUNNING_CONTAINERS" -gt 0 ]; then
            echo "CONTAINER_CHECK_RESULT=Container up and running" >> $GITHUB_ENV
          else
            echo "CONTAINER_CHECK_RESULT=Container failed to run" >> $GITHUB_ENV
          fi
      # set up python and pytest environment
      - name: Set up Python
        uses: actions/setup-python@v4
      
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install pytest requests pytest-ordering

      - name: Test with pytest
        run: |
          cd tests/
          pytest -v assn4_tests.py | tee test_results.txt

      - name: Write log file
        run: |          
          # Check the result of the container check
          if [ "$CONTAINER_CHECK_RESULT" == "Container up and running" ]; then
            echo "Container up and running" >> log.txt
          else
            echo "Container failed to run" >> log.txt
          fi
          
          # Check the test results
          if grep -q "failed" tests/test_results.txt; then
            echo "tests failed" >> log.txt
          else
            echo "tests succeeded" >> log.txt
          fi
        env:
          CONTAINER_CHECK_RESULT: ${{ env.CONTAINER_CHECK_RESULT }}

      - name: upload test results
        if: always()
        uses: actions/upload-artifact@v4
        with: 
          name: GH_test_results
          path: tests/test_results.txt

      - name: Upload log file
        uses: actions/upload-artifact@v4
        with:
          name: workflow-log
          path: log.txt
